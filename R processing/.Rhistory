fitted <- bn.fit.barchart(res, learning.test)
fitted <- bn.fit(res, learning.test)
fitted[2]
res
?set.arc
res = gs(iris)
res = set.arc(res, "A", "B")
res
?gs
?k2
?Score
?Score
?score
?bnlearn
res = gs(iris)
res = hc(iris)
res
fitted <- bn.fit(res, iris)
fitted[2]
fitted
res <- iamb(iris)
res
res <- tree.bayes(iris)
iris
res <- tree.bayes(iris, "Species")
res <- tree.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
iris[,1] <- as.factor(iris[,1])
iris[,2] <- as.factor(iris[,2])
iris[,3] <- as.factor(iris[,3])
iris[,4] <- as.factor(iris[,4])
res <- tree.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
res
fitted <- bn.fit(res, iris)
fitted[2]
fitted
min(Sepal.Length)
min(iris$Sepal.Length)
data(iris)
min(iris$Sepal.Length)
library(arules)
install.packages(arules)
install.packages('arules')
library(arules)
discretize(iris$Sepal.Length, method='interval', categories = 3)
iris$Sepal.Length <- discretize(iris$Sepal.Length, method='interval', categories = 3)
iris$Petal.Width <- discretize(iris$Petal.Width, method='interval', categories = 3)
iris$Petal.Length <- discretize(iris$Petal.Length, method='interval', categories = 3)
res <- tree.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
iris$Sepal.Width <- discretize(iris$Sepal.Width, method='interval', categories = 3)
res <- tree.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
fitted <- bn.fit(res, iris)
fitted
fitted
res
summary(res)
res$nodes
res <- naiv.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
res <- naive.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
fitted <- bn.fit(res, iris)
fitted[2]
fitted[2]
?JSON
?json
library(RJSONIO)
file <- toJSON(fitted)
file
write(file, "iris.json")
fitted[2]$prob
fitted$prob
fitted$Species
fitted$Sepal.Length
file <- toJSON(res)
file
write(file, "iris.json")
res[1]
res[[1]]
res[[2]]
res[2]
res[2]$nodes
res[2]$nodes[1]
res[2]$nodes[1][1]
res[2]$nodes[1][[1]]
res[2]$nodes[[[1]]
res[2]$nodes[[[1]]]
res[2]$nodes[[1]]
res[2]$nodes
names(res[2]$nodes)
nodes <- data.frame(Names=(names(res[2]$nodes)))
nodes <- data.frame(names=(names(res[2]$nodes)))
nodes$id <- 1:nrow(nodes)
View(nodes)
res$arcs
links <- as.data.frame(res$arcs)
links
colnames(links) <- c('source', 'target')
links
nodes
nodes$names[1]
nodes$id[which(nodes$names[1] == nodes$names))]
nodes$id[which(nodes$names[1] == nodes$names)]
nodes$id[which(nodes$names == nodes$names)]
links$source[which(nodes$names == nodes$names)]
nodes$names == nodes$names
nodes$id[which(nodes$names == links$source)]
merge(nodes, links, by.x='names', by.y='source')
merge(nodes, links, by.x='names', by.y='target')
nodes
links <- merge(nodes, links, by.x='names', by.y='source')
links <- merge(nodes, links, by.x='names', by.y='target')
links
links <- as.data.frame(res$arcs)
colnames(links) <- c('source', 'target')
links <- merge(nodes, links, by.x='names', by.y='source')
links
links <- merge(nodes, links, by.x='names', by.y='target')
links
links <- as.data.frame(res$arcs)
colnames(links) <- c('source', 'target')
links <- merge(nodes, links, by.x='names', by.y='source')
links <- merge(links, nodes, by.x='names', by.y='target')
links <- merge(links, nodes, by.x='target', by.y='names')
links
links <- as.data.frame(res$arcs)
colnames(links) <- c('source', 'target')
links <- merge(links, nodes, by.x='source', by.y='names')
links <- merge(links, nodes, by.x='target', by.y='names')
test <- compile(as.grain(fitted))
links <- as.data.frame(res$arcs)
colnames(links) <- c('source', 'target')
links <- merge(links, nodes, by.x='source', by.y='names')
links <- merge(links, nodes, by.x='target', by.y='names')
links
links <- links[,c(3,4)]
links
colnames(links) <- c('source', 'target')
?toJSON
graphJSON <- list(nodes, links)
graphJSON
graphJSON <- toJSON(graphJSON)
graphJSON
graphJSON <- list(nodes, links)
graphJSON <- list(nodes = nodes, links)
graphJSON <- list(nodes = nodes, links = links)
graphJSON <- toJSON(graphJSON)
graphJSON
file <- toJSON(graphJSON)
graphJSON <- list(nodes = nodes, links = links)
graphJSON <- toJSON(graphJSON)
write(graphJSON, "iris.json")
toJSONArray(links)
toJSONarray(links)
??toJSONarray
library(rCharts)
toJSONarray(links)
toJSONArray(links)
toJSON(links)
toJSONArray(graphJSON)
graphJSON <- toJSONArray(graphJSON)
write(graphJSON, "iris.json")
graphJSON <- c(nodes, links)
graphJSON
graphJSON <- nodes
graphJSON
graphJSON <- toJSONArray(c(nodes, links))
graphJSON
graphJSON <- toJSONArray(nodes)
graphJSON
graphJSON2 <- toJSONArray(links)
graphJSON2
graph <- c(graphJSON, graphJSON2)
?jsonlite
??jsonlite
install.packages(jsonlite)
install.packages('jsonlite')
library(jsonlite)
toJSON(nodes)
toJSON(links)
?toJSON
toJSON(links, simplifyDataFrame = FALSE)
toJSON(links, simplifyDataFrame = TRUE)
as.matrix(links, nodes)
as.matrix(links)
toJSON(as.matrix(links))
toJSON(nodes)
rbind(links, nodes)
toJSON(links)
c(toJSON(links), toJSON(nodes))
toJSON(nodes, links)
toJSON(c(nodes, link)
)
toJSON(c(nodes, links))
list(nodes)
x <- list(nodes)
x <- list(nodes, links)
x <- list(nodes=nodes, links=links)
toJSON(x)
graph <- toJSON(x)
write(graph, "iris.json")
links
x
graph
write(graph, "iris.json")
res <- naive.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
fitted <- bn.fit(res, iris)
names(res[2]$nodes)
nodes <- data.frame(names=(names(res[2]$nodes)))
nodes$id <- 1:nrow(nodes)
links <- as.data.frame(res$arcs)
colnames(links) <- c('source', 'target')
View(links)
links <- merge(links, nodes, by.x='source', by.y='names')
links <- merge(links, nodes, by.x='target', by.y='names')
links <- links[,c(3,4)]
colnames(links) <- c('source', 'target')
links <- links-1
View(links)
x <- list(nodes=nodes, links=links)
library(jsonlite)
graph <- toJSON(x)
write(graph, "iris.json")
library(tau)
library(stringr)
library(stringdist)
#setwd and read in table
setwd("C:/Users/ian.p.kloo/Documents/Shiny Apps/Goshawk/Goshawk Reems/data processing")
Table <- read.csv('UpdatedGraphData2.csv', stringsAsFactors=FALSE)
From.Name<-as.character(Table$From.Name)
From.DOB<-as.character(Table$From.DOB)
From.Address<-as.character(Table$From.Address)
From.Type<-rep(NA, length(From.Name))
From.ID<-paste(From.Name, From.Address, From.DOB)
for (i in 1:length(From.Name)){
if(!is.na(From.DOB[i])){From.Type[i]<-"Person"}}
From.Entity.Table<-unique(data.frame(From.ID, From.Name, From.Address, From.DOB, From.Type))
colnames(From.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
Originator.Name<-as.character(Table$Originator.Scrubbed)
Originator.Address<-paste(as.character(Table$Originator.Address.2),
" ", as.character(Table$Originator.Address.3), " ", as.character(Table$Originator.Address.4))
Originator.DOB<-rep(NA, length(Originator.Name))
Originator.Type<-rep("Bank", length(Originator.Name))
Originator.ID<-paste(Originator.Name, Originator.Address)
Originator.Entity.Table<-unique(data.frame(Originator.ID, Originator.Name, Originator.Address, Originator.DOB, Originator.Type))
colnames(Originator.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
OrderingBank.Name<-as.character(Table$Ordering.Bank)
OrderingBank.Address<-paste(as.character(Table$Ordering.Bank.Address.2),
" ", as.character(Table$Ordering.Bank.Address.3), " ", as.character(Table$Ordering.Bank.Address.4))
OrderingBank.DOB<-rep(NA, length(OrderingBank.Name))
OrderingBank.Type<-rep("Bank", length(OrderingBank.Name))
OrderingBank.ID<-paste(OrderingBank.Name, OrderingBank.Address)
OrderingBank.Entity.Table<-unique(data.frame(OrderingBank.ID, OrderingBank.Name, OrderingBank.Address, OrderingBank.DOB, OrderingBank.Type))
colnames(OrderingBank.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
DebitParty.Name<-as.character(Table$Debit.Party)
DebitParty.Address<-paste(as.character(Table$Debit.Party.Address.Line.2),
" ", as.character(Table$Debit.Party.Address.Line.3), " ", as.character(Table$Debit.Party.Address.Line.4))
DebitParty.DOB<-rep(NA, length(DebitParty.Name))
DebitParty.Type<-rep("Bank", length(DebitParty.Name))
DebitParty.ID<-paste(DebitParty.Name, DebitParty.Address)
DebitParty.Entity.Table<-unique(data.frame(DebitParty.ID, DebitParty.Name, DebitParty.Address, DebitParty.DOB, DebitParty.Type))
colnames(DebitParty.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
CreditParty.Name<-as.character(Table$Credit.Party)
CreditParty.Address<-paste(as.character(Table$Credit.Party.Address.2),
" ", as.character(Table$Credit.Party.Address.3), " ", as.character(Table$Credit.Party.Address.4))
CreditParty.DOB<-rep(NA, length(CreditParty.Name))
CreditParty.Type<-rep("Bank", length(CreditParty.Name))
CreditParty.ID<-paste(CreditParty.Name, CreditParty.Address)
CreditParty.Entity.Table<-unique(data.frame(CreditParty.ID, CreditParty.Name, CreditParty.Address, CreditParty.DOB, CreditParty.Type))
colnames(CreditParty.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
BeneficiaryBank.Name<-as.character(Table$Beneficiary.Bank)
BeneficiaryBank.Address<-paste(as.character(Table$Beneficiary.Bank.Address.2),
" ", as.character(Table$Beneficiary.Bank.Address.3), " ", as.character(Table$Beneficiary.Bank.Address.4))
BeneficiaryBank.DOB<-rep(NA, length(BeneficiaryBank.Name))
BeneficiaryBank.Type<-rep("Bank", length(BeneficiaryBank.Name))
BeneficiaryBank.ID<-paste(BeneficiaryBank.Name, BeneficiaryBank.Address)
BeneficiaryBank.Entity.Table<-unique(data.frame(BeneficiaryBank.ID, BeneficiaryBank.Name, BeneficiaryBank.Address, BeneficiaryBank.DOB, BeneficiaryBank.Type))
colnames(BeneficiaryBank.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
Beneficiary.Name<-as.character(Table$Beneficiary.Original)
Beneficiary.Address<-paste(as.character(Table$Beneficiary.Address.2),
" ", as.character(Table$Beneficiary.Address.3), " ", as.character(Table$Beneficiary.Address.4))
Beneficiary.DOB<-rep(NA, length(Beneficiary.Name))
Beneficiary.Type<-rep(NA, length(BeneficiaryBank.Name))
Beneficiary.ID<-paste(Beneficiary.Name, Beneficiary.Address)
Beneficiary.Entity.Table<-unique(data.frame(Beneficiary.ID, Beneficiary.Name, Beneficiary.Address, Beneficiary.DOB, Beneficiary.Type))
colnames(Beneficiary.Entity.Table)<-c("ID", "Name", "Address", "DOB", "Type")
#combine into single table
Raw.Entity.Table<-rbind(From.Entity.Table, Originator.Entity.Table, OrderingBank.Entity.Table, DebitParty.Entity.Table,
CreditParty.Entity.Table, BeneficiaryBank.Entity.Table, Beneficiary.Entity.Table)
View(Raw.Entity.Table)
IID.Lookup[CID.Lookup.IID.List[[541]],4]
IID<-seq(1:length(Raw.Entity.Table[,1]))
IID.Lookup<-cbind(IID, Raw.Entity.Table)
IID.Lookup[CID.Lookup.IID.List[[541]],4]
as.matrix(IID.Lookup)
IID.Lookup<-as.matrix(IID.Lookup)
IID.Lookup[IID.Lookup[,4] == "",4]<-NA
IID.Lookup[IID.Lookup[,4] == "",4]
IID.Lookup<-data.frame(IID.Lookup)
head(IID.Lookup)
IID<-seq(1:length(Raw.Entity.Table[,1]))
IID.Lookup<-cbind(IID, Raw.Entity.Table)
IID.Lookup[IID.Lookup[,4] == "",4]
IID.Lookup[IID.Lookup[,4] == "",4]<-NA
head(IID.Lookup)
Compare.Records.Orig<-IID.Lookup[,c(1,3:5)]
CID.Lookup.CID.List<-list()
CID.Lookup.IID.List<-list()
CID.counter<-100001
name.matches<-list()
entity.matches<-list()
New.Records<-list()
New.Records[[i]]<-Compare.Records
i <- 1
Compare.Records<-Compare.Records.Orig[i:nrow(Compare.Records.Orig),]
Compare.Records
rpairs<-compare.linkage(Compare.Records[1,2:4], Compare.Records[2:4], strcmp=1:2)
library(RecordLinkage)
Compare.Records[1,2:4]
Compare.Records[2:4]
x <- Compare.Records[2:4]
pairs.matrix<-as.matrix(rpairs$pairs)
rpairs<-compare.linkage(Compare.Records[1,2:4], Compare.Records[2:4], strcmp=1:2)
pairs.matrix<-as.matrix(rpairs$pairs)
View(pairs.matrix)
pairs.matrix<-as.matrix(rpairs$pairs)
pairs.matrix[is.na(pairs.matrix)]<-0
scores<-vector(mode="numeric", length=length(rpairs$pairs[,1]))
for(j in 1:length(rpairs$pairs[,1])){
scores[j]<-sum(pairs.matrix[j,3:5])
}
scores
sum(pairs.matrix[j,3:5])
rpairs$pairs[1,]
rpairs$pairs[scores>1.9,]
max(scores)
rpairs$pairs[1,]
Compare.Records[name.matches[[i]][,2],1]
i <- 1
Compare.Records[name.matches[[i]][,2],1]
Compare.Records<-Compare.Records.Orig[i:nrow(Compare.Records.Orig),]
rpairs<-compare.linkage(Compare.Records[1,2:4], Compare.Records[2:4], strcmp=1:2)
pairs.matrix<-as.matrix(rpairs$pairs)
pairs.matrix[is.na(pairs.matrix)]<-0
scores<-vector(mode="numeric", length=length(rpairs$pairs[,1]))
for(j in 1:length(rpairs$pairs[,1])){
scores[j]<-sum(pairs.matrix[j,3:5])
}
if(max(scores) <= 1.9){
name.matches[[i]]<-rpairs$pairs[1,]
}else{
name.matches[[i]]<-rpairs$pairs[scores>1.9,]
}
entity.matches[[i]]<-Compare.Records[name.matches[[i]][,2],1]
Compare.Records[name.matches[[i]][,2],1]
CID.Lookup.CID.List[[i]]<-CID.counter
CID.Lookup.IID.List[[i]]<-entity.matches[[i]]
New.Records[[i+1]]<-Compare.Records[-c(name.matches[[i]][,2]),]
Compare.Records[-c(name.matches[[i]][,2]),]
New.Records[[i+1]]
New.Records[[i+1]][1]
head(New.Records)
New.Records[1]
New.Records[1][1]
for(i in 1:length(IID.Lookup[,1])){
Compare.Records<-Compare.Records.Orig[i:nrow(Compare.Records.Orig),]
#Compare.Records<-New.Records[[i]]
rpairs<-compare.linkage(Compare.Records[1,2:4], Compare.Records[2:4], strcmp=1:2)
pairs.matrix<-as.matrix(rpairs$pairs)
pairs.matrix[is.na(pairs.matrix)]<-0
scores<-vector(mode="numeric", length=length(rpairs$pairs[,1]))
for(j in 1:length(rpairs$pairs[,1])){
scores[j]<-sum(pairs.matrix[j,3:5])
}
if(max(scores) <= 1.9){
name.matches[[i]]<-rpairs$pairs[1,]
}else{
name.matches[[i]]<-rpairs$pairs[scores>1.9,]
}
entity.matches[[i]]<-Compare.Records[name.matches[[i]][,2],1]
CID.Lookup.CID.List[[i]]<-CID.counter
CID.Lookup.IID.List[[i]]<-entity.matches[[i]]
New.Records[[i+1]]<-Compare.Records[-c(name.matches[[i]][,2]),]
CID.counter<-CID.counter+1
print(CID.counter)
}
CID.Lookup.Info.List<-list()
for (i in 1:length(CID.Lookup.IID.List)){
CID.Lookup.Info.List[[i]]<-IID.Lookup[CID.Lookup.IID.List[[i]][1],1:6]
}
df <- data.frame('IID'=character(), "ID"=character(), 'Name'=character(),"Address"=character(), "DOB"=character(), "Type"=character(), 'CID'=character())
for (i in 1:length(CID.Lookup.IID.List)){
x <- do.call('rbind', CID.Lookup.Info.List[i])
x$CID <- CID.Lookup.CID.List[[i]]
df <- rbind(df,x)
print(paste(round(i/length(CID.Lookup.IID.List),2)*100,'%',sep=''))
}
View(df)
for (i in 2:nrow(df)){
if(df$CID[i]==df$CID[i-1]){
df$Name[i]<-df$Name[i-1]
df$Address[i]<-df$Address[i-1]
df$DOB[i]<-df$DOB[i-1]
df$Type[i]<-df$Type[i-1]
df$ID[i]<-paste(df$Name[i],df$Address[i],df$DOB[i])
}
print(paste(round(i/nrow(df),2)*100,'%',sep=''))
}
CID.Lookup.Info.List<-list()
for (i in 1:length(CID.Lookup.IID.List)){
CID.Lookup.Info.List[[i]]<-IID.Lookup[CID.Lookup.IID.List[[i]][1],1:6]
}
df <- data.frame('IID'=character(), "ID"=character(), 'Name'=character(),"Address"=character(), "DOB"=character(), "Type"=character(), 'CID'=character())
for (i in 1:length(CID.Lookup.IID.List)){
x <- do.call('rbind', CID.Lookup.Info.List[i])
x$CID <- CID.Lookup.CID.List[[i]]
df <- rbind(df,x)
print(paste(round(i/length(CID.Lookup.IID.List),2)*100,'%',sep=''))
}
View(df)
df <- df[order(df$CID),]
View(df)
View(df)
View(x)
View(df)
Raw.Graph.Table<-cbind(as.character(as.Date(Table$Transaction.Date, '%m/%d/%Y')), as.numeric(Table$Amount), From.ID, Originator.ID,
OrderingBank.ID, DebitParty.ID, CreditParty.ID, BeneficiaryBank.ID, Beneficiary.ID)
View(Raw.Graph.Table)
for (i in 1:length(Raw.Entity.Table[,1])){
for (j in 1:length(Raw.Entity.Table[1,])){
Raw.Graph.Table[i,j]<-as.character(Raw.Graph.Table[i,j])}}
View(Raw.Graph.Table)
View(Raw.Graph.Table)
Raw.Graph.Table[1,1]
Raw.Graph.Table[1,2]
Raw.Graph.Table[1,3]
Raw.Graph.Table[1,4]
Raw.Graph.Table[1,5]
View(Raw.Graph.Table)
ncol(Raw.Graph.Table)
View(Raw.Graph.Table)
View(Raw.Graph.Table)
View(Raw.Graph.Table)
Raw.Graph.Table.Check<-Raw.Graph.Table
for(i in 4:ncol(Raw.Graph.Table)){
for(j in 1:length(Raw.Graph.Table[,i])){
Raw.Graph.Table.Check[j,i] <-str_trim(Raw.Graph.Table[j,i])
if(Raw.Graph.Table.Check[j,i] == ""){
Raw.Graph.Table[j,i] <- Raw.Graph.Table[j,i-1]
}
}
}
View(Raw.Graph.Table)
Raw.Graph.Table<-cbind(as.character(as.Date(Table$Transaction.Date, '%m/%d/%Y')), as.numeric(Table$Amount), From.ID, Originator.ID,
OrderingBank.ID, DebitParty.ID, CreditParty.ID, BeneficiaryBank.ID, Beneficiary.ID)
for (i in 1:length(Raw.Entity.Table[,1])){
for (j in 1:length(Raw.Entity.Table[1,])){
Raw.Graph.Table[i,j]<-as.character(Raw.Graph.Table[i,j])}}
n <- 0
Raw.Graph.Table.Check<-Raw.Graph.Table
for(i in 4:ncol(Raw.Graph.Table)){
for(j in 1:length(Raw.Graph.Table[,i])){
Raw.Graph.Table.Check[j,i] <-str_trim(Raw.Graph.Table[j,i])
if(Raw.Graph.Table.Check[j,i] == ""){
Raw.Graph.Table[j,i] <- Raw.Graph.Table[j,i-1]
n <- n + 1
print(n)
}
}
}
Raw.Graph.Table.Check[j,i] == ""
Raw.Graph.Table.Check == ""
Raw.Graph.Table[1097:1017,]
View(Raw.Graph.Table)
IID.Graph.Table<-matrix(data=NA, nrow=length(Raw.Graph.Table[,1]), ncol=length(Raw.Graph.Table[1,]))
View(IID.Graph.Table)
IID.Graph.Table[,1:2]<-Raw.Graph.Table[,1:2]
View(IID.Graph.Table)
for (j in 3:length(Raw.Graph.Table[1,])){
for (i in 1:length(Raw.Graph.Table[,1])){
IID.Graph.Table[i,j]<-IID.Lookup[match(Raw.Graph.Table[i,j], IID.Lookup[,2]),1]
}
}
getwd()
write.csv(df, "df.csv")
require(RWeka)
require(bnlearn)
require(rCharts)
setwd("~/Projects/BayesNetsViz/R processing")
data(iris)
iris <- data.frame(iris)
iris[,c(1:4)] <- discretize(iris[,c(1:4)], method='interval')
res <- naive.bayes(iris, "Species", c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
fitted <- bn.fit(res, iris)
graphObj <- graphviz.plot(fitted)
yCoord <- graphObj@renderInfo@nodes$nodeY
xCoord <- graphObj@renderInfo@nodes$nodeX
newlist <- list()
for (i in 1:length(fitted)) {
temp <- c(test[[i]], x=as.numeric(xCoord[names(xCoord) == names(test[i])]), y = as.numeric(yCoord[names(yCoord) == names(test[i])]))
newlist[[length(newlist)+1]] <- temp
}
jsonOut <- toJSONArray(newlist)
newlist <- list()
for (i in 1:length(fitted)) {
temp <- c(fitted[[i]], x=as.numeric(xCoord[names(xCoord) == names(fitted[i])]), y = as.numeric(yCoord[names(yCoord) == names(fitted[i])]))
newlist[[length(newlist)+1]] <- temp
}
jsonOut <- toJSONArray(newlist)
jsonOut
toJSONArray(links)
toJSONArray(links=links)
toJSONArray(links)
?toJSONArray
write(jsonOut, 'iris.json')
